import { join } from 'path';

import Parcel, { createWorkerFarm } from '@parcel/core';
import { MemoryFS } from '@parcel/fs';

const rootPath = join(__dirname, '..', '..', '..', '..');
const fixtureRoot = join(rootPath, 'fixtures/parcel-transformer-test-app');
const extractionFixtureRoot = join(rootPath, 'fixtures/parcel-transformer-test-extract-app');

const workerFarm = createWorkerFarm();

afterAll(() => {
  workerFarm.end();
});

describe('transformer without extraction', () => {
  const outputFS = new MemoryFS(workerFarm);
  const parcel = new Parcel({
    config: join(fixtureRoot, '.parcelrc'),
    entries: [join(fixtureRoot, 'src', 'index.html')],
    workerFarm,
    outputFS,
    targets: {
      default: {
        distDir: join(fixtureRoot, 'dist'),
      },
    },
  });

  it('transforms assets with babel plugin', async () => {
    const { changedAssets, bundleGraph } = await parcel.run();

    const asset = Array.from(changedAssets.values()).find(
      (asset) => asset.filePath === join(fixtureRoot, 'src/index.js')
    );
    expect(asset).toBeDefined();
    const outputJs = await outputFS.readFile(
      bundleGraph.getBundlesWithAsset(asset!)[0].filePath,
      'utf8'
    );
    expect(outputJs).toInclude('/* index.js generated by @compiled/babel-plugin v0.0.0 */');
    expect(outputJs).toInclude('._syaz5scu{color:red}');
    expect(outputJs).toInclude(`require("@compiled/react/runtime")`);
  }, 30000);
});

describe('transformer with extraction', () => {
  const outputFS = new MemoryFS(workerFarm);
  const parcel = new Parcel({
    config: join(extractionFixtureRoot, '.parcelrc'),
    entries: [join(extractionFixtureRoot, 'src', 'index.html')],
    workerFarm,
    outputFS,
    targets: {
      default: {
        distDir: join(extractionFixtureRoot, 'dist'),
      },
    },
  });

  it('transforms assets with compiled and extraction babel plugins', async () => {
    const { changedAssets, bundleGraph } = await parcel.run();

    const asset = Array.from(changedAssets.values()).find(
      (asset) => asset.filePath === join(extractionFixtureRoot, 'src/index.js')
    );
    expect(asset).toBeDefined();
    const outputCss = await outputFS.readFile(
      bundleGraph.getBundlesWithAsset(asset!)[0].filePath,
      'utf8'
    );
    expect(outputCss).toInclude('/* index.js generated by @compiled/babel-plugin v0.0.0 */');
    expect(outputCss).not.toInclude('{color:red}');
    expect(outputCss).toInclude(`require("@compiled/react/runtime")`);
    expect(outputCss).toInclude(`require("compiled-css!._syaz5scu%7Bcolor%3Ared%7D");`);
  }, 30000);
});
