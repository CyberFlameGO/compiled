import { join } from 'path';

import Parcel, { createWorkerFarm } from '@parcel/core';
import { MemoryFS } from '@parcel/fs';

const rootPath = join(__dirname, '..', '..', '..', '..');
const fixtureRoot = join(rootPath, 'fixtures/parcel-transformer-test-app');
const extractionFixtureRoot = join(rootPath, 'fixtures/parcel-transformer-test-extract-app');

const workerFarm = createWorkerFarm();

afterAll(() => {
  workerFarm.end();
});

describe('transformer without extraction', () => {
  const outputFS = new MemoryFS(workerFarm);
  const parcel = new Parcel({
    config: join(fixtureRoot, '.parcelrc'),
    entries: [join(fixtureRoot, 'src', 'index.html')],
    outputFS,
    targets: {
      default: {
        distDir: join(fixtureRoot, 'dist'),
      },
    },
    workerFarm,
  });

  it('transforms assets with babel plugin', async () => {
    const { changedAssets } = await parcel.run();

    const asset = Array.from(changedAssets.values()).find(
      (asset) => asset.filePath === join(fixtureRoot, 'src/index.js')
    );

    const code = await asset?.getCode();
    expect(code).toMatchInlineSnapshot(`
      "\\"use strict\\";
      var _runtime = require(\\"@compiled/react/runtime\\");
      var _jsxRuntime = require(\\"react/jsx-runtime\\");
      /* index.js generated by @compiled/babel-plugin v0.0.0 */ var _2 = \\"._syaz5scu{color:red}\\";
      var _ = \\"._1wyb12am{font-size:50px}\\";
      var App = function() {
          /*#__PURE__*/ return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
              children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_runtime.CC, {
                  children: [
                      /*#__PURE__*/ (0, _jsxRuntime.jsx)(_runtime.CS, {
                          children: [
                              _,
                              _2
                          ]
                      }),
                      /*#__PURE__*/ (0, _jsxRuntime.jsx)(\\"div\\", {
                          className: (0, _runtime.ax)([
                              \\"_1wyb12am _syaz5scu\\"
                          ]),
                          children: \\"hello from parcel\\"
                      })
                  ]
              })
          });
      };
      "
    `);
  }, 30000);
});

describe('transformer with extraction', () => {
  const outputFS = new MemoryFS(workerFarm);
  const parcel = new Parcel({
    config: join(extractionFixtureRoot, '.parcelrc'),
    entries: [join(extractionFixtureRoot, 'src', 'index.html')],
    outputFS,
    targets: {
      default: {
        distDir: join(extractionFixtureRoot, 'dist'),
      },
    },
    workerFarm,
  });

  it('transforms assets with compiled and extraction babel plugins', async () => {
    const { changedAssets } = await parcel.run();

    const asset = Array.from(changedAssets.values()).find(
      (asset) => asset.filePath === join(extractionFixtureRoot, 'src/index.js')
    );

    const code = await asset?.getCode();
    expect(code).toMatchInlineSnapshot(`
      "\\"use strict\\";
      require(\\"compiled-css!._syaz5scu%7Bcolor%3Ared%7D\\");
      require(\\"compiled-css!._1wyb12am%7Bfont-size%3A50px%7D\\");
      var _runtime = require(\\"@compiled/react/runtime\\");
      var _jsxRuntime = require(\\"react/jsx-runtime\\");
      /* index.js generated by @compiled/babel-plugin v0.0.0 */ var App = function() {
          /*#__PURE__*/ return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
              children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\\"div\\", {
                  className: (0, _runtime.ax)([
                      \\"_1wyb12am _syaz5scu\\"
                  ]),
                  children: \\"hello from parcel\\"
              })
          });
      };
      "
    `);
  }, 30000);
});
